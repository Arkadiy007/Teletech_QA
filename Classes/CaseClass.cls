/**********************************************************************
Name: CaseClass 
Copyright Â© notice: Nissan Motor Company
======================================================
Purpose: 
Creates a new Case Comment if description is changed. 

Related Apex Trigger: Case_After, Case_Before
======================================================
History: 

VERSION AUTHOR DATE DETAIL 
1.0 - Biswa Ray 12/29/2010 Created
1.2 - Biswa Ray 11/01/2011 Incorporated Code Comments and Headers
1.3 - Bryan Fry 13/01/2011 Added code to create CaseTeamMember 
                           (RONETELETECH-80).
1.4 - Bryan Fry 08/08/2011 Remove CaseTeamMember code
1.5 - Yuli Fintescu 11/11/2011 Parse out contact info from the description field of the cases that are generated by email
                                If the email address on the email to case does NOT exist, an account should be created on the fly and associate the account to the case.

1.6 - Vivek Batham  1/15/2015  Added utility method for Chatter post Comments      
***********************************************************************/
public class CaseClass {
	public static Map<String, Schema.RecordTypeInfo> rtInfosByName = Schema.SObjectType.Case.getRecordTypeInfosByName();    
    public static final String CA_EMAIL_INFINITI_RT = rtInfosByName.get('CA Email Infiniti').getRecordTypeId(); 
    public static final String CA_EMAIL_NISSAN_RT = rtInfosByName.get('CA Email Nissan').getRecordTypeId(); 
    public static final String CCC_RT = rtInfosByName.get('CCC').getRecordTypeId(); 
    public static final String LEAF_RT = rtInfosByName.get('LEAF').getRecordTypeId(); 
    public static final RecordType MARITZ_PART = [select id, name from recordtype where name = 'Maritz' and sobjecttype = 'Account' limit 1];
    public static final String DPIC_RT = rtInfosByName.get('DPIC').getRecordTypeId(); 
    private enum CA_E2C_TYPE {UNKNOWN, NISSAN, INFINITI, NON_NISSAN_INFINITI, CCC, LEAF}

    private static final Pattern[] NISSAN_SUBJECT_PATTERNS = new Pattern[] {Pattern.compile('My Nissan Vehicle'), 
            Pattern.compile('Certified Pre-Owned'),
            Pattern.compile('Owner\'s Manual or Related Information'),
            Pattern.compile('My Warranty or Extended Service Plan'),
            Pattern.compile('Vehicle Maintenance'),
            Pattern.compile('Financing Options'),
            Pattern.compile('A Nissan Dealer'),
            Pattern.compile('My Loan, Lease, or Online Bill Pay'),
            Pattern.compile('Nissan North America'),
            Pattern.compile('Other')};
    
    private static final Pattern[] INFINITI_SUBJECT_PATTERNS = new Pattern[] {Pattern.compile('My Infiniti Vehicle'), 
            Pattern.compile('My Warranty or Extended Service Plan'),
            Pattern.compile('Vehicle Maintenance'),
            Pattern.compile('Financing Options'),
            Pattern.compile('My Loan, Lease or Online Bill Pay'),
            Pattern.compile('Infiniti Retailers'),
            Pattern.compile('Infiniti Corporate'),
            Pattern.compile('Other')};
            
    private static final Pattern[] CCC_SUBJECT_PATTERNS = new Pattern[] {Pattern.compile('Infiniti Products'), 
            Pattern.compile('Infiniti Hybrid and Electric Vehicles'),
            Pattern.compile('Nissan Products')};

    private static final Pattern[] LEAF_SUBJECT_PATTERNS = new Pattern[] {Pattern.compile('The Nissan LEAF')};
    
    private static final Pattern WEBFORM_PATTERN = Pattern.compile('(([\\w\\W\\s]*\\n+)|^)' + 
            'firstname :[\\w\\W\\s]*\\n+' + 
            'lastname :[\\w\\W\\s]*\\n+' + 
            'email :[\\w\\W\\s]*\\n+' + 
            'homephone :[\\w\\W\\s]*\\n+' + 
            'comments :[\\w\\W\\s]*');
    
    /*
        Checks if description is changed, then insert a record to case comment
        with it's corresponding case description.         
    */
    public static CaseComment createCasecomment (Case oldCase, Case newCase) {
        
        CaseComment cc;
        if ((newCase.Description == null && oldCase.Description != null) ||
            (newCase.Description != null && oldCase.Description != null && 
            oldCase.Description != newCase.Description)) {
            String caseId = newCase.ID;
            cc = new CaseComment(CommentBody = oldCase.Description, parentID = caseId);
        }
        return cc;
    }
    
    public static void Email2Case_CreateAccountByEmailMessage(List<EmailMessage> inputEmailMessages) {
        Map<String, Map<Account, List<Case>>> emailAccountsCases = new Map<String, Map<Account, List<Case>>>();
        
        for (EmailMessage e : inputEmailMessages) {
            if (e.Parent.Origin != 'Email To Case' || e.Parent.ContactId != null) 
                continue;
            
            CA_E2C_TYPE e2cType = CaseSubjectCriteria(e.Subject, e.Parent.RecordTypeId);
            System.Debug('*** Email2Case_CreateAccountByEmailMessage e2cType ' + e2cType); 
            if (e2cType == CA_E2C_TYPE.UNKNOWN)
                continue;
            
            //for NI, parse case description to get account info
            if (e2cType == CA_E2C_TYPE.INFINITI || e2cType == CA_E2C_TYPE.NISSAN || e2cType == CA_E2C_TYPE.NON_NISSAN_INFINITI ||
                e2cType == CA_E2C_TYPE.CCC || e2cType == CA_E2C_TYPE.LEAF) {
                Case c = new Case(ID = e.ParentID);
                Account a = new Account(RecordTypeID = MARITZ_PART.ID);
                
                //extract account info from the Description body
                if (extractContactInfo(e2cType, e, a))
                    populateEmailAccountsCases(c, a, emailAccountsCases);
            }
        }
        
        if (emailAccountsCases.isEmpty()) 
            return;
        
        //retrieve Accounts from SF by emailAccountsCases, grouping by email
        Map<String, List<Account>> extisingAccounts = getExistingAccounts(emailAccountsCases);

        List<Account> accountsToCreate = new List<Account>();
        List<Case> casesToUpdate = new List<Case>();
        
        //compare extisingAccounts to the emailAccountsCases to
        //collect new accounts that need to be created: accountsToCreate
        //update case AccountID and ContactID if found match SF account
        for (String email : emailAccountsCases.keySet()) {
            Map<Account, List<Case>> accountCases = emailAccountsCases.get(email);
            Set<Account> accountsInEmail = accountCases.keySet();
            
            //if the input email is not existing in SF for any account, collect all its accounts for creating
            if (!extisingAccounts.containsKey(email))
                accountsToCreate.addAll(new List<Account>(accountsInEmail).deepClone());
            
            //if a SF account has the email, check if lastname and firstname are the same. if same, update the case whoID to the SF account 
            else {
                List<Account> accountsInSF = extisingAccounts.get(email);
                
                for (Account aInEmail : accountsInEmail) {
                    Boolean bFound = false;
                    
                    for (Account aInSF : accountsInSF) {
                        //update case AccountID and ContactID if found matching SF account
                        if (compareName(aInEmail.LastName, aInEmail.FirstName, aInSF.LastName, aInSF.FirstName)) {
                            for (Case c : accountCases.get(aInEmail))
                                casesToUpdate.add(new Case(ID = c.ID, AccountID = aInSF.ID, ContactID = aInSF.PersonContactID));
                            
                            bFound = true;
                            break;
                        }
                    }
                    
                    //if no matching is in SF, collect it in accountsToCreate for creating
                    if (!bFound)
                        accountsToCreate.add(aInEmail.clone(false, true));
                }
            }
        }
            
        //create the accounts
        try {
            if (accountsToCreate.size() > 0) {
                insert accountsToCreate;
                
                //PersonContactID have to be reretrieved.
                List<Account> newAccounts = [Select ID, PersonContactID, PersonEmail, LastName, FirstName From Account Where ID in: accountsToCreate];
                
                //update account ID and contact ID of the corresponding cases related to each new account
                for (Account aInSF : newAccounts) {
                    Map<Account, List<Case>> accountCases = emailAccountsCases.get(aInSF.PersonEmail);
                    
                    for (Account aInEmail : accountCases.keySet()) {
                        if (compareName(aInEmail.LastName, aInEmail.FirstName, aInSF.LastName, aInSF.FirstName)) {
                            for (Case c : accountCases.get(aInEmail))
                                casesToUpdate.add(new Case(ID = c.ID, AccountId = aInSF.ID, ContactID = aInSF.PersonContactID));
                            
                            break;
                        }
                    }
                }
            }
            
            if (casesToUpdate.size() > 0) {
                update casesToUpdate;
            }
        } catch (Dmlexception e) {
            for (Integer i = 0; i < e.getNumDml(); i++) {
                System.debug(e.getDmlMessage(i));
            }
        }
    }
    
    /**
        determines E2C type
        To Test:
            RecordType CA_EMAIL_INFINITI_RT = [select id, name from recordtype where name = 'CA Email Infiniti' and sobjecttype = 'Case' limit 1];
            RecordType CA_EMAIL_NISSAN_RT = [select id, name from recordtype where name = 'CA Email Nissan' and sobjecttype = 'Case' limit 1];
            String description = 'greeting : ' ;
            Case testCase = new Case(Origin = 'Email To Case', Status = 'New', Description = description, RecordTypeID = CA_EMAIL_INFINITI_RT.ID, Subject = 'I want to request an Owner\'s Manual');
            System.Debug(CaseClass.CaseSubjectCriteria(testCase.Subject, testCase.RecordTypeID));
    */
    private static CA_E2C_TYPE CaseSubjectCriteria(String subject, ID recordTypeID) {
        if (subject != null && recordTypeID == CA_EMAIL_NISSAN_RT) {
            for (Pattern p : NISSAN_SUBJECT_PATTERNS) {
                if (p.matcher(subject).matches())
                    return CA_E2C_TYPE.NISSAN;
            }
        }
        
        if (subject != null && recordTypeID == CA_EMAIL_INFINITI_RT) {
            for (Pattern p : INFINITI_SUBJECT_PATTERNS) {
                if (p.matcher(subject).matches())
                    return CA_E2C_TYPE.INFINITI;
            }
        }
        
        if (subject != null && recordTypeID == CCC_RT) {
            for (Pattern p : CCC_SUBJECT_PATTERNS) {
                if (p.matcher(subject).matches())
                    return CA_E2C_TYPE.CCC;
            }
        }

        if (subject != null && recordTypeID == LEAF_RT) {
            for (Pattern p : LEAF_SUBJECT_PATTERNS) {
                if (p.matcher(subject).matches())
                    return CA_E2C_TYPE.LEAF;
            }
        }
        
        if (recordTypeID == CA_EMAIL_NISSAN_RT || recordTypeID == CA_EMAIL_INFINITI_RT ||
            recordTypeID == CCC_RT || recordTypeID == LEAF_RT) {
            return CA_E2C_TYPE.NON_NISSAN_INFINITI;
        }
        
        return CA_E2C_TYPE.UNKNOWN;
    }
    
    /**
        populate emailAccountsCases, grouping cases by email then by DISTINCT accounts. 
        since multiple cases can be generated by the same email address, like, one person complains many problems,
        or event more complicated, one family complains many problems using the same email.
        
            emailAccountsCases: Email   Address -> Account1 -> Case1
                                                            -> Case2
                                                -> Account2 -> Case1
                                                            -> Case2
    */
    private static void populateEmailAccountsCases (Case c, Account a, Map<String, Map<Account, List<Case>>> emailAccountsCases) {
        Map<Account, List<Case>> accountCases;
        
        if (emailAccountsCases.containsKey(a.PersonEmail)) {
            accountCases = emailAccountsCases.get(a.PersonEmail);
            
            //dedupping accounts that have the same email
            Boolean bFound = false;
            for (Account aInEmail : accountCases.keySet()) {
                //if the extracted account has already been collected, add the current case in his collection
                if (compareName(aInEmail.LastName, aInEmail.FirstName, a.LastName, a.FirstName)) {
                    List<Case> casesInEmail = accountCases.get(aInEmail);
                    casesInEmail.add(c);
                    
                    bFound = true;
                    break;
                }   
            }
            
            //if the extracted account has not been collected, start a new map by collecting the account and his case
            if (!bFound)
                accountCases.put(a, new List<Case>{c});
        } else {
            accountCases = new Map<Account, List<Case>>();
            emailAccountsCases.put(a.PersonEmail, accountCases);
            accountCases.put(a, new List<Case>{c});
        }
    }
    
    /**
        retrieve Accounts from SF by emailAccountsCases, grouping by email
    */
    private static Map<String, List<Account>> getExistingAccounts(Map<String, Map<Account, List<Case>>> emailAccountsCases) {
        //retrieve Accounts from SF by emailAccountsCases, grouping by email
        Map<String, List<Account>> extisingAccounts = new Map<String, List<Account>>();
    
        for (Account a : [Select PersonEmail, LastName, FirstName, PersonContactID From Account Where RecordTypeID =: MARITZ_PART.ID and PersonEmail IN: emailAccountsCases.keySet() Order by PersonEmail, LastModifiedDate desc, LastName, FirstName]) {
            String email = a.PersonEmail.toLowerCase();
            
            List<Account> accs;
            if (extisingAccounts.containsKey(email))
                accs = extisingAccounts.get(email);
            else {
                accs = new List<Account>();
                extisingAccounts.put(email, accs);
            }
            accs.add(a);
        }
        
        return extisingAccounts;
    }
    
    private static Boolean extractContactInfo(CA_E2C_TYPE e2cType, EmailMessage e, Account account) {
        if (e2cType == CA_E2C_TYPE.INFINITI || e2cType == CA_E2C_TYPE.NISSAN || 
            e2cType == CA_E2C_TYPE.CCC || e2cType == CA_E2C_TYPE.LEAF)
            return extractContactInfo(e.TextBody, account);
        else if (e2cType == CA_E2C_TYPE.NON_NISSAN_INFINITI) 
            return extractContactInfo(e, account);
        
        return false;
    }
    
    /**
        Parse out contact info from the description field of the cases that are generated by email
    */
    private static boolean extractContactInfo(String sourceText, Account account) {
        System.Debug('*** extractContactInfo sourceText ' + sourceText); 
        final String NEWLINE;
        try {
            if (!WEBFORM_PATTERN.matcher(sourceText).matches())
                return false;
            
            if (sourceText.contains('\r\n'))
                NEWLINE = '\r\n';
            else
                NEWLINE = '\n';
            
            Integer indStart = sourceText.indexOf('firstname :');
            Integer indEnd = sourceText.indexOf('comments :', indStart);
            String theBody = sourceText.substring(indStart, indEnd);
            
            Integer ind = theBody.indexOf('firstname :') + 11;
            indEnd = theBody.indexOf(NEWLINE, ind);
            account.Firstname = StringToNULL(theBody.substring(ind, indEnd));
            System.Debug('*** account.Firstname:' + account.Firstname);
            
            ind = theBody.indexOf('lastname :') + 10;
            indEnd = theBody.indexOf(NEWLINE, ind);
            account.Lastname = StringToNULL(theBody.substring(ind, indEnd));
            System.Debug('*** account.Lastname:' + account.Lastname);
            /*
            ind = theBody.indexOf('methodofcontact :') + 17;
            indEnd = theBody.indexOf(NEWLINE, ind);
            String methodofcontact = theBody.substring(ind, indEnd);
            theBody = theBody.substring(indEnd + 1);
            */
            ind = theBody.indexOf('email :') + 7;
            indEnd = theBody.indexOf('homephone :', ind);
            account.PersonEmail = StringToNULL(theBody.substring(ind, indEnd).toLowerCase());
            System.Debug('*** account.PersonEmail:' + account.PersonEmail);
            
            ind = indEnd + 11;
            indEnd = theBody.indexOf(NEWLINE, ind);
            account.PersonHomePhone = StringToNULL(theBody.substring(ind, indEnd));
            System.Debug('*** account.PersonHomePhone:' + account.PersonHomePhone);
            
            ind = theBody.indexOf('workphone :');
            if (ind >= 0) {
                ind += 11;
                indEnd = theBody.indexOf(NEWLINE, ind);
                account.PersonOtherPhone = StringToNULL(theBody.substring(ind, indEnd));
            }
            System.Debug('*** account.PersonOtherPhone:' + account.PersonOtherPhone);

            ind = theBody.indexOf('twitter :');
            if (ind >= 0) {
                ind += 9;
                indEnd = theBody.indexOf(NEWLINE, ind);
                account.Twitter_Handle__c = StringToNULL(theBody.substring(ind, indEnd));
            }
            System.Debug('*** account.Twitter_Handle__c:' + account.Twitter_Handle__c);
            
            String address1 = '';
            ind = theBody.indexOf('address1 :');
            if (ind >= 0) {
                ind += 10;
                indEnd = theBody.indexOf(NEWLINE, ind);
                address1 = theBody.substring(ind, indEnd).Trim();
            }
            System.Debug('*** address1:' + address1);
            
            String address2 = '';
            ind = theBody.indexOf('address2 :');
            if (ind >= 0) {
                ind += 10;
                indEnd = theBody.indexOf(NEWLINE, ind);
                address2 = theBody.substring(ind, indEnd).Trim();
            }
            System.Debug('*** address2:' + address2);
           
            String unit = '';
            ind = theBody.indexOf('unit :');
            if (ind >= 0) {
                ind += 6;
                indEnd = theBody.indexOf(NEWLINE, ind);
                unit = theBody.substring(ind, indEnd).Trim();
            }
            System.Debug('*** unit:' + unit);
            
            if (address1 != '') {
                account.PersonMailingStreet = address1;
            }
            if (address2 != '') {
                if (account.PersonMailingStreet != null)
                    account.PersonMailingStreet = account.PersonMailingStreet + '\n' + address2;
                else
                    account.PersonMailingStreet = address2;
            }
            if (unit != '') {
                if (account.PersonMailingStreet != null)
                    account.PersonMailingStreet = account.PersonMailingStreet + '\n' + unit;
                else
                    account.PersonMailingStreet = unit;
            }
            System.Debug('*** account.PersonMailingStreet:' + account.PersonMailingStreet);
            
            ind = theBody.indexOf('city :');
            if (ind >= 0) {
                ind += 6;
                indEnd = theBody.indexOf(NEWLINE, ind);
                account.PersonMailingCity = StringToNULL(theBody.substring(ind, indEnd));
            }
            System.Debug('*** account.PersonMailingCity:' + account.PersonMailingCity);
            
            ind = theBody.indexOf('state :');
            if (ind >= 0) {
                ind += 7;
                indEnd = theBody.indexOf(NEWLINE, ind);
                account.PersonMailingState = StringToNULL(theBody.substring(ind, indEnd));
            }
            System.Debug('*** account.PersonMailingState:' + account.PersonMailingState);
            
            ind = theBody.indexOf('zip :');
            if (ind >= 0) {
                ind += 5;
                indEnd = theBody.indexOf(NEWLINE, ind);
                account.PersonMailingPostalCode = StringToNULL(theBody.substring(ind, indEnd));
            }
            System.Debug('*** account.PersonMailingPostalCode:' + account.PersonMailingPostalCode);
        } catch (Exception e) {
            System.Debug('Error in parsing email body');
            return false;
        }
        
        if (Account.PersonEmail == null || Account.PersonEmail == '')
            return false;
        
        if ((account.FirstName == null || account.FirstName == '') && 
                (account.LastName == null || account.LastName == ''))
            return false;
        
        return true;
    }
    
    /**
        extract account info from emailmessage record
        To Test:
            Account a = new Account();
            EmailMessage e = new EmailMessage(FromName = 'John, Smith', FromAddress='johnsmith@email.com');
            CaseClass.extractContactInfo(e, a);
            System.Debug(a);
    */
    private static Boolean extractContactInfo(EmailMessage e, Account account) {
        String email = e.FromAddress.toLowerCase();
        if (e.FromName == null || e.FromName == '' || email == null || email == '' || email.contains('nissan') || email.contains('infiniti')) 
            return false;
        
        if (e.FromName.contains(',')) { //format of LastName, FirstName
            String[] nameComma = e.FromName.split(',');
            if (nameComma.size() > 1) {
                account.LastName = StringToNULL(nameComma[0]);
                account.FirstName = StringToNULL(nameComma[1]);
            } else if (nameComma.size() > 0)
                account.LastName = StringToNULL(nameComma[0]);
        } else {
            String[] nameComma = e.FromName.split(' '); //format of FirstName LastName
            if (nameComma.size() > 1) {
                account.FirstName = StringToNULL(nameComma[0]);
                account.LastName = StringToNULL(nameComma[1]);
            } else if (nameComma.size() > 0)
                account.LastName = StringToNULL(nameComma[0]);
        }
        account.PersonEmail = email;
        System.Debug('*** account' + account);
        return true;
    }
    
    private static String StringToNULL(String input) {
        return (input == null || input.length() == 0 ? null : input.Trim());
    }
    
    private static Boolean compareName(String fromLastName, String fromFirstName, String toLastName, String toFirstName) {
        String fLastName = fromLastName == null ? '' : fromLastName;
        String fFirstName = fromFirstName == null ? '' : fromFirstName;
        String tLastName = toLastName == null ? '' : toLastName;
        String tFirstName = toFirstName == null ? '' : toFirstName;
    
        return fLastName.equalsIgnoreCase(tLastName) && fFirstName.equalsIgnoreCase(tFirstname);
    }
    
    /* Using Secondary Case Description look up which fields should be required. Check
       that those fields are present and set errors if any are missing.
    */
    public static void validateVCSEscalations(List<Case> cases) {
        Boolean hasError = false;

        // Get List of all VCS Validation required fields.  The number of rows should be limited (~50) so it's
        // quicker to get them all and access the ones we want than to figure out which ones are needed for the query.
        List<Code__c> allRequiredFieldsList =
                 [select Description__c, Account__c, Active__c, App_Version__c, Approved_Phone__c,
                         Browser_Version__c, Error_Code__c, Firmware_Version__c, Owner_Portal_ID_User_ID__c,
                         Phone_Model__c, Phone_Operating_System__c, TCU__c, SIM__c, ICCID__c, Vehicle_Name__c,
                         Error_Message__c, Severity_1_Nissan__c, Severity_2_Nissan__c, Severity_3_Nissan__c,
                         Severity_4_Nissan__c, Severity_1_Infiniti__c, Severity_2_Infiniti__c,
                         Severity_3_Infiniti__c, Severity_4_Infiniti__c, VCS_Spare_Validation_01__c,
                         VCS_Spare_Validation_02__c, VCS_Spare_Validation_03__c, VCS_Spare_Validation_04__c,
                         VCS_Spare_Validation_05__c, VCS_Spare_Validation_06__c, VCS_Spare_Validation_07__c,
                         VCS_Spare_Validation_08__c
                  from Code__c
                  where Type__c = 'VCS_Validation'];

        // Create Map of required fields based on Description
        Map<String,Code__c> allRequiredFieldsMap = new Map<String,Code__c>();
        for (Code__c code: allRequiredFieldsList) {
            allRequiredFieldsMap.put(code.Description__c, code);
        }

        // Loop through Cases and evalutate each one, setting errors as necessary.
        for (Case c: cases) {
            hasError = false;
                    
            // For the secondary reason on the Case, get the Code__c row that says which fields are required.
            Code__c requiredfields = allRequiredFieldsMap.get(c.VCS_Validation__c);
                
            if (!hasError && requiredFields != null) {
                // If a field is set to be required and its value is null, give an error.
                if (requiredFields.Account__c == true && c.AccountId == null) {
                    hasError = true;
                } else if (requiredFields.Active__c == true && c.RCAS_Active__c == null) {
                    hasError = true;
                } else if (requiredFields.App_Version__c == true && c.App_Version__c == null) {
                    hasError = true;
                } else if (requiredFields.Approved_Phone__c == true && c.Approved_Phone__c == null) {
                    hasError = true;
                } else if (requiredFields.Browser_Version__c == true && c.Browser_Version__c == null) {
                    hasError = true;
                } else if (requiredFields.Error_Code__c == true && c.Error_Code__c == null) {
                    hasError = true;
                } else if (requiredFields.Firmware_Version__c == true && c.Firmware_Version__c == null) {
                    hasError = true;
                } else if (requiredFields.Owner_Portal_ID_User_ID__c == true && c.Owner_Portal_ID_User_ID__c == null) {
                    hasError = true;
                } else if (requiredFields.Phone_Model__c == true && c.Phone_Model__c == null) {
                    hasError = true;
                } else if (requiredFields.Phone_Operating_System__c == true && c.Phone_Operating_System__c == null) {
                    hasError = true;
                } else if (requiredFields.TCU__c == true && c.TCU__c == null) {
                    hasError = true;
                } else if (requiredFields.SIM__c == true && c.SIM__c == null) {
                    hasError = true;
                } else if (requiredFields.ICCID__c == true && c.ICCID__c == null) {
                    hasError = true;
                } else if (requiredFields.Vehicle_Name__c == true && c.Vehicle_Name__c == null) {
                    hasError = true;
                } else if (requiredFields.VCS_Spare_Validation_06__c == true && c.Time_Observed__c == null){
                	hasError = true;
                } else if (requiredFields.VCS_Spare_Validation_07__c == true && c.Date_Observed__c == null){
                	hasError = true;
                } else if (requiredFields.VCS_Spare_Validation_08__c == true && c.Error_Reproduced__c == null){
                	hasError = true;
                }

                if (hasError && requiredFields.Error_Message__c != null) {
                    c.addError(requiredFields.Error_Message__c);
                }
            }
        }       
    }

    public static void doChatterPost(List<DTS_Field_Inspection__c> dtsList, Map<Id, Case> casMap){
		
		String text;
		String recipient;
		for(DTS_Field_Inspection__c dts : [Select Id, Requesting_Agent__c, Related_Support_Case__c, Customer_Name__r.Name, VIN__r.Name, Dealer__r.Name, Customers_Concern__c, 
												  Dealer_Code__c,DTS_Inspection_Date__c, Inspection_Time_Notes__c, Related_Support_Case__r.Caller_Name__c,
												  Related_Support_Case__r.Recordtype.Name, OwnerId, Owner.Name, Owner.Profile.Name, Related_Support_Case__r.Vehicle_Name__r.Make_Model__c
									       From DTS_Field_Inspection__c where Id IN :dtsList]){
		 recipient = dts.OwnerId;							       	
		 if(dts.OwnerId != Userinfo.getUserId() && (dts.Owner.Profile.Name == 'DTS' || dts.Owner.Profile.Name == 'DTS Manager')){
	        text = 'Hello '+dts.Owner.Name+', \n\n'; 
	        text +='Field Inspection: '+URL.getSalesforceBaseUrl().toExternalForm() + '/'+dts.Id +'\n';
	        if(dts.Related_Support_Case__c != null){
	        text += 'Case: '+URL.getSalesforceBaseUrl().toExternalForm()+'/'+dts.Related_Support_Case__c+' \n\n';
	        }
	        
	        text += 'Your Field Inspection appointment was confirmed with the customer and the dealer. Your new Field Inspection is available and can be accessed via the above link. \n\n';
	        if(casMap.get(dts.Related_Support_Case__c) != null){
	        text += 'Case: '+casMap.get(dts.Related_Support_Case__c).CaseNumber + '\n';
	        }
	        if(dts.Customer_Name__r.Name != null){
	        	text += 'Customer Name: '+dts.Customer_Name__r.Name + '\n';
	        }else{	        	
	        	text += 'Customer Name:  \n';	        	
	        }
	        
	        if(dts.Related_Support_Case__r.Vehicle_Name__r.Make_Model__c != null){
	        	text += 'Model / Year: '+dts.Related_Support_Case__r.Vehicle_Name__r.Make_Model__c + '\n';
	        }else{
	        	text += 'Model / Year:  \n';
	        }
	        
	        text += 'VIN: '+dts.VIN__r.Name + '\n';
	        if(dts.Dealer__r.Name != null){
	        text += 'Dealer Name: '+dts.Dealer__r.Name + '\n';
	        }else {
	         text += 'Dealer Name: \n';
	        }
	        if(dts.Dealer_Code__c != null){
	        text += 'Dealer Code: '+dts.Dealer_Code__c + '\n';
	        }else {
	        text += 'Dealer Code: \n';	
	        }
	        if(dts.Inspection_Time_Notes__c != null){
	        text += 'Inspection Time Notes: '+dts.Inspection_Time_Notes__c	+'\n\n Notes to DTS: \n';
	        }else{
	        text += 'Inspection Time Notes: \n\n Notes to DTS: \n';	
	        }	        	        
	        if(dts.Customers_Concern__c != null){
        	text += dts.Customers_Concern__c;
       		}
			
			ConnectApiHelper.sendPrivateMessageToRecipients(text, recipient);
			//ConnectApiHelper.postCommentWithMentionsToGroup(null, text);
	        //ConnectApiHelper.postFeedItemWithMentions(null, UserInfo.getUserId(), text);
	        			
		  }
        }   
    }
}